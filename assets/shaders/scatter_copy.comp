#version 450 core
#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 0) readonly buffer TransferSrc {
  // Count of 4-byte words of data to copy.
  uint words_to_copy;
  // Count of structures (_not_ words) to copy.
  uint count;

  // An array of the following structures `(words_to_copy + 4) * 4` bytes apart.
  // {
  //     // Offset in the destination buffer in 4-byte words.
  //     destination_word_offset: u32,
  //     data_word_0: u32,
  //     ..,
  //     data_word_N: u32,
  // }
  uint data[];
}
transfer_src;

layout(std430, binding = 1) buffer TransferDst {
  uint transfer_dst[];
};

void main() {
  // Each invocation copies a whole T, which can be any size, though it's presumed small.
  uint index = gl_GlobalInvocationID.x;
  if (index >= transfer_src.count) {
    return;
  }

  uint words_to_copy = transfer_src.words_to_copy;
  uint stride = words_to_copy + 1u;

  uint struct_word_offset = index * stride;
  uint data_word_offset = struct_word_offset + 1u;

  uint destination_word_offset = transfer_src.data[struct_word_offset];

  for (uint i = 0u; i < words_to_copy; ++i) {
    transfer_dst[destination_word_offset + i] = transfer_src.data[data_word_offset + i];
  }
}
